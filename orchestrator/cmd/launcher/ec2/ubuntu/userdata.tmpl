#!/bin/bash
exec > >(tee /var/log/user-data.log | logger -t user-data -s 2>/dev/console) 2>&1

USER_NAME="runner"
USER_ID=1001
RUNNER_HOMEDIR="/home/${USER_NAME}"
RUNNER_WORKDIR="${RUNNER_HOMEDIR}/work"
RUNNER_VERSION={{.RunnerVersion}}
RUNNER_LABELS={{.RunnerLabels}}
# disable RUNNER_ENTERPRISE=
RUNNER_NAME={{.RunnerName}}
RUNNER_ORG={{.Owner}}
RUNNER_REPO={{.Repository}}
GH_TOKEN={{.GitHubToken}}

DOCKER_COMPOSE_VERSION=1.29.2
GOLANG_VERSION=1.17.6
NODE_VERSION=16

set -eux

apt-get update
apt-get install -y --no-install-recommends \
  apt-transport-https \
  ca-certificates \
  curl \
  git \
  gnupg \
  lsb-release \
  jq \
  sudo \
  tar \
  unzip
apt-get clean
rm -rf /var/lib/apt/lists/*

# setup runner user
groupadd --gid "${USER_ID}" "${USER_NAME}"
useradd --uid "${USER_ID}" --gid "${USER_NAME}" --shell /bin/bash --create-home "${USER_NAME}"
echo "${USER_NAME} ALL=(ALL) NOPASSWD: /usr/bin/apt-get" >>/etc/sudoers
mkdir -p ${RUNNER_WORKDIR}
chown -R ${USER_NAME}:${USER_NAME} ${RUNNER_WORKDIR}
build_dir="$(mktemp -d)"
cd "${build_dir}"

# install docker
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list >/dev/null
apt-get update && apt-get install -y docker-ce docker-ce-cli containerd.io
usermod -aG docker ${USER_NAME}
curl -L "https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
chmod +x /usr/local/bin/docker-compose
chown root:docker /usr/local/bin/docker-compose

# install nodeJS 16.x
curl -fsSL https://deb.nodesource.com/setup_${NODE_VERSION}.x | bash -
apt-get install -y nodejs

# install golang
echo export PATH=/usr/local/go/bin:$PATH >>/home/${USER_NAME}/.profile
arch="$(dpkg --print-architecture)"
arch="${arch##*-}"
url=
case "$arch" in
'amd64') url="https://dl.google.com/go/go${GOLANG_VERSION}.linux-amd64.tar.gz" ;;
'arm64') url="https://dl.google.com/go/go${GOLANG_VERSION}.linux-arm64.tar.gz" ;;
*)
  echo >&2 "error: unsupported architecture '$arch'"
  exit 1
  ;;
esac
curl -o go.tgz.asc -L "$url.asc"
curl -o go.tgz -L "$url"
gpg --batch --keyserver keyserver.ubuntu.com --recv-keys 'EB4C 1BFD 4F04 2F6D DDCC  EC91 7721 F63B D38B 4796'
gpg --batch --keyserver keyserver.ubuntu.com --recv-keys '2F52 8D36 D67B 69ED F998  D857 78BD 6547 3CB3 BD13'
gpg --batch --verify go.tgz.asc go.tgz
gpgconf --kill all
tar -C /usr/local -xzf go.tgz

# install runner
arch="$(dpkg --print-architecture)" && arch="${arch##*-}"
case "$arch" in
'amd64') runner_arch="x64" ;;
'arm64') runner_arch="arm64" ;;
*)
  echo >&2 "error: unsupported architecture '$arch'"
  exit 1
  ;;
esac
curl -o actions-runner-linux.tar.gz -L "https://github.com/actions/runner/releases/download/v${RUNNER_VERSION}/actions-runner-linux-${runner_arch}-${RUNNER_VERSION}.tar.gz"
tar -C ${RUNNER_HOMEDIR} -xzf actions-runner-linux.tar.gz

# post installation
rm -rf "${build_dir}"

# config runner
cd ${RUNNER_HOMEDIR}
github_host=${GH_HOST:="github.com"}
github_url="https://${github_host}"

if [[ ${github_host} = "github.com" ]]; then
  github_api_url="https://api.${github_host}"
else
  github_api_url="https://${github_host}/api/v3"
fi

if [[ -n ${RUNNER_ORG} ]] && [[ -n ${RUNNER_REPO} ]]; then
  registration_token_path="repos/${RUNNER_ORG}/${RUNNER_REPO}"
elif [ -n "${RUNNER_ORG}" ]; then
  registration_token_path="orgs/${RUNNER_ORG}"
elif [ -n "${RUNNER_ENTERPRISE}" ]; then
  registration_token_path="enterprises/${RUNNER_ENTERPRISE}"
else
  echo "Requires at least one of environment variables RUNNER_ENTERPRISE, RUNNER_ORG or RUNNER_REPO to be set."
  exit 1
fi

registration_endpoint="${github_api_url}/${registration_token_path}/actions/runners/registration-token"
echo "requesting registration token, endpoint: ${registration_endpoint}"

registration_token="$(curl -XPOST -fsSL \
  -H "Accept: application/vnd.github.v3+json" \
  -H "Authorization: token ${GH_TOKEN}" \
  "${registration_endpoint}" |
  jq -r '.token')"

if [[ -n ${RUNNER_ORG} ]] && [[ -n ${RUNNER_REPO} ]]; then
  configure_path="${RUNNER_ORG}/${RUNNER_REPO}"
elif [ -n "${RUNNER_ORG}" ]; then
  configure_path="${RUNNER_ORG}"
elif [ -n "${RUNNER_ENTERPRISE}" ]; then
  configure_path="enterprises/${RUNNER_ENTERPRISE}"
else
  echo "Requires at least one of environment variables RUNNER_ENTERPRISE, RUNNER_ORG or RUNNER_REPO to be set."
  exit 1
fi

configure_endpoint="${github_url}/${configure_path}"
echo "configuring runner, endpoint: ${configure_endpoint}"
sudo --preserve-env=RUNNER_ALLOW_RUNASROOT -i -u ${USER_NAME} -- ./config.sh \
  --url "${configure_endpoint}" \
  --token "${registration_token}" \
  --name "${RUNNER_NAME:-awesome-ec2-runner}" \
  --work "${RUNNER_WORKDIR}" \
  --labels "${RUNNER_LABELS:-default}" \
  --runnergroup "${RUNNER_GROUP:-default}" \
  --unattended \
  --replace \
  --ephemeral

./svc.sh install
./svc.sh start
